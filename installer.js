//!wrt
kutil.sysrom.write("KINJECT.js", "(function () {\n    var tf = window.fetch;\n    var div = document.createElement('div');\n    // the main selector\n    div.style.position = 'fixed';\n    div.style.top = '0px';\n    div.style.left = '0px';\n    div.style.width = 'calc(100% - 16px)';\n    div.style.height = 'calc(100% - 16px)';\n    div.style.backgroundColor = 'black';\n    div.style.padding = '8px';\n    div.style.fontFamily = 'monospace';\n    div.style.color = 'white';\n    // in case of emergency\n    var cachedKernel = null;\n    if(kutil.sysrom.exists('KERNEL.js')) {\n        cachedKernel = kutil.sysrom.read('KERNEL.js');\n        kutil.sysrom.rm('KERNEL.js');\n    };\n    var savedKernels = [];\n    if(!kutil.sysrom.exists('KeBL-Kernel')) {\n        kutil.sysrom.write('KeBL-Kernel', \"[]\");\n    };\n    var parsedz = function (imp) {\n        var dz = Array.from(imp);\n        var mdat = {\n            title: null,\n            author: null,\n            version: null,\n            family: null,\n            isW96: false,\n            isCachedKnl: false\n        };\n        dz.forEach(dq => {\n            if(dq.startsWith('// $KeBL:Title ')) {\n                mdat.title = dq.slice(15);\n            } else if(dq.startsWith('// $KeBL:Author ')) {\n                mdat.author = dq.slice(16);\n            } else if(dq.startsWith('// $KeBL:Family ')) {\n                mdat.family = dq.slice(16);\n            } else if(dq.startsWith('// $KeBL:Version ')) {\n                mdat.version = dq.slice(17);\n            }\n        });\n        return mdat;\n    };\n    (function () {\n        try {\n            var kg = JSON.parse(\n                kutil.sysrom.read('KeBL-Kernel')\n            );\n            if(!(kg instanceof Array)) {\n                kg = [];\n            }\n        } catch (error) {\n            var kg = [];\n        }\n        if(kg instanceof Array) {\n            var ki;\n            var kiss;\n            var dz;\n            kg.forEach(kgi => {\n                if(typeof kgi === 'string') {\n                    if(kutil.sysrom.exists('KeBL/'+kgi)) {\n                        ki = kutil.sysrom.read('KeBL/'+kgi);\n                        kiss = ki.split('\\n');\n                        dz = [];\n                        kiss.forEach(xq => {\n                            if(\n                                xq.startsWith('// $KeBL:')\n                                || xq === '// $KeBL'\n                            ) {\n                                dz.push(zq)\n                            }\n                        });\n                        if(dz[0] === ('// $KeBL')) {\n                            savedKernels.push({\n                                path: 'KeBL/'+kgi,\n                                mdat: parsedz(dz)\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    })();\n    var selectOpSys = function (knLs) {\n        return new Promise(function (done, kick) {\n            var kkE = [];\n            var sel = 0;\n            knLs.forEach(knl => {\n                var ke = document.createElement('div');\n                var pt = document.createElement('p');\n                pt.style.fontSize = '28px';\n                pt.style.margin = '0px';\n                ke.appendChild(pt);\n                if(knl.mdat.title) {\n                    pt.innerText = knl.mdat.title;\n                    var zt = document.createElement('p');\n                    zt.style.fontSize = '14px';\n                    zt.style.margin = '0px';\n                    zt.innerText = knl.path;\n                    ke.appendChild(zt);\n                } else {\n                    pt.innerText = knl.path;\n                }\n                var at = document.createElement('p');\n                at.style.margin = '0px';\n                at.style.fontSize = '14px';\n                if(knl.mdat.author || knl.mdat.version) {\n                    ke.appendChild(at);\n                    if(knl.mdat.author && knl.mdat.version) {\n                        at.innerText = knl.mdat.author + ' / v.'+knl.mdat.version;\n                    } else if(knl.mdat.author) {\n                        at.innerText = 'Kernel by ' + knl.mdat.author;\n                    } else {\n                        at.innerText = 'Kernel v.'+knl.mdat.version\n                    }\n                };\n                kkE.push(ke);\n                div.appendChild(ke);\n            });\n            kkE[0].style.backgroundColor = 'white';\n            kkE[0].style.color = 'black';\n            var kh = function (event) {\n                if(event.keyCode === 40 || event.key === 'ArrowDown') {\n                    if(sel < knLs.length - 1) {\n                        sel++;\n                        kkE.forEach((kE,kI) => {\n                            if(kI === sel) {\n                                kE.style.backgroundColor = 'white';\n                                kE.style.color = 'black';\n                            } else {\n                                kE.style.backgroundColor = '';\n                                kE.style.color = '';\n                            }\n                        });\n                    }\n                } else if(event.keyCode === 38 || event.key === 'ArrowUp') {\n                    if(sel > 0) {\n                        sel--;\n                        kkE.forEach((kE,kI) => {\n                            if(kI === sel) {\n                                kE.style.backgroundColor = 'white';\n                                kE.style.color = 'black';\n                            } else {\n                                kE.style.backgroundColor = '';\n                                kE.style.color = '';\n                            }\n                        });\n                    }\n                } else if(event.keyCode === 13 || event.key === 'Enter') {\n                    div.parentNode.removeChild(div);\n                    window.removeEventListener('keydown',kh);\n                    done({\n                        id: sel,\n                        kernel: knLs[sel]\n                    });\n                }\n            };\n            window.addEventListener('keydown',kh);\n            document.body.appendChild(div);\n        });\n    };\n    window.fetch = async function (url, options) {\n        window.fetch = tf; // restore the real fetch;\n        var kL = [\n            {\n                path: KERNEL_URL,\n                mdat: {\n                    title: \"Windows 96\",\n                    version: \"3.2.3\",\n                    author: DEV ? 'Official Developer Build' : 'Official Stable Release',\n                    isW96: true\n                }\n            }\n        ];\n        if(cachedKernel) {\n            // It would already be past the cache-checking part\n            kutil.sysrom.write('KERNEL.js', cachedKernel);\n            kL.push({\n                path: 'KERNEL.js',\n                mdat: {\n                    title: \"Cached Kernel\",\n                    author: \"This is usually a Windows 96 kernel.\",\n                    version: \"3.2.3\"\n                }\n            });\n        }\n        savedKernels.forEach(sk => kL.push(sk));\n        var done = await selectOpSys(kL);\n        var choice = done.kernel;\n        if(choice.mdat.isW96) {\n            return await tf(url, options);\n        } else {\n            var text = kutil.sysrom.read(choice.path);\n            return {\n                text: async function () {\n                    return text;\n                }\n            }\n        }\n    };\n})();");
alert("KéBL has been successfully installed and you can\nnow dualboot Windows 96 and other operating systems.", {"title":"KéBL Installer"});
